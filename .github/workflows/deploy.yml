name: 'Terraform Deploy'

on:
  workflow_dispatch:

env:
  CLI_VERSION: 2.31.0
  TF_VERSION: 1.1.5
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
  TF_VAR_remote_state_account: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  TF_VAR_remote_state_container: "remote-state-container"
  TF_VAR_environment: "cicd"
  TF_WORKSPACE_NAME: "sample-cluster-cicd"
jobs:
  deploy:
    name: Provision - Solution
    runs-on: ubuntu-latest
    env:
      TF_VAR_environment: cicd
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=storage_account_name=${TF_VAR_remote_state_account} -backend-config=container_name=${TF_VAR_remote_state_container} -upgrade
        continue-on-error: false

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace new $TF_WORKSPACE_NAME || terraform workspace select $TF_WORKSPACE_NAME
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false

      - name: Terraform Apply
        id: apply
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.CLI_VERSION }}
          inlineScript: |
            #!/usr/bin/env bash
            set -euo pipefail

            function terraformVersionCheck() {
              if [[ $(which terraform) && $(terraform --version | head -n1 | cut -d" " -f2 | cut -c 2\-) == $TF_VERSION ]]; then
                echo "Terraform version check completed"
              else
                TF_ZIP_TARGET="https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_${TF_VERSION}_linux_amd64.zip"
                echo "Info: installing $TF_VERSION, target: $TF_ZIP_TARGET"

                wget $TF_ZIP_TARGET -q
                unzip -q "terraform_${TF_VERSION}_linux_amd64.zip"
                mv terraform /usr/local/bin
                rm *.zip
              fi

              terraform -version
            }
            terraformVersionCheck
            ls -l
            terraform apply -auto-approve
        continue-on-error: false
